var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));
function Node(value) {
  this.value = value;
  this.left = null;
  this.right = null;
}
function BinarySearchTree() {
  this.root = null;
  this.add = function(element, node=this.root) {
    const newNode = new Node(element);
    if(!node) {
      // root is empty
      this.root = newNode;
    }
    else if(node.value > element) {
      if (node.left === null) {
        node.left = newNode;
      }
      else {
        this.add(element, node.left);
      }
    }
    else if(node.value < element) {
      if (node.right === null) {
        node.right = newNode;
      }
      else {
        this.add(element, node.right);
      }
    }
    else{
      return null;
    }
  }
}
function isBinarySearchTree(tree) {
  // change code below this line
  function checkIsValidNode(node) {
    if(node === null) {
      return true;
    }
    else if(node.constructor !== Node) {
      return false;
    }
    else {
      return checkIsValidNode(node.left) && checkIsValidNode(node.right);
    }
  }
  return checkIsValidNode(tree.root);
  // change code above this line
}
let bst = new BinarySearchTree();
console.log(isBinarySearchTree(bst));
bst.add(8);
console.log(isBinarySearchTree(bst));
bst.add(3);
bst.add(10);
bst.add(1);
bst.add(6);
bst.add(4);
bst.add(7);
bst.add(10);
bst.add(14);
bst.add(13);
console.log(isBinarySearchTree(bst));
let node = bst.root;
while(node.left) {
  node = node.left;
}
console.log(node);
node.left = -1;
console.log(node);
console.log(isBinarySearchTree(bst));
