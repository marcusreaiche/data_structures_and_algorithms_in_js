var displayTree = tree => console.log(JSON.stringify(tree, null, 2));
function Node(value) {
  this.value = value;
  this.left = null;
  this.right = null;
}
function BinarySearchTree() {
  this.root = null;
  // change code below this line
  this.findMinHeight = function(node=this.root) {
    if(!node) return -1;
    return 1 + Math.min(this.findMinHeight(node.left),
      this.findMinHeight(node.right));
  }
  this.findMaxHeight = function(node=this.root) {
    if(!node) return -1;
    return 1 + Math.max(this.findMaxHeight(node.left),
      this.findMaxHeight(node.right));
  }
  this.isBalanced = () => this.findMinHeight() + 1 >= this.findMaxHeight();
  // change code above this line
  this.add = function(element, node=this.root) {
    const newNode = new Node(element);
    if(!node) {
      // root is empty
      this.root = newNode;
    }
    else if(node.value > element) {
      if (node.left === null) {
        node.left = newNode;
      }
      else {
        this.add(element, node.left);
      }
    }
    else if(node.value < element) {
      if (node.right === null) {
        node.right = newNode;
      }
      else {
        this.add(element, node.right);
      }
    }
    else{
      return null;
    }
  }
}
const bst = new BinarySearchTree();
console.log(bst.findMinHeight());
console.log(bst.findMaxHeight());
bst.add(8);
bst.add(3);
bst.add(10);
bst.add(1);
bst.add(6);
bst.add(4);
bst.add(7);
bst.add(14);
console.log(bst.findMaxHeight());
console.log(bst.findMinHeight());
