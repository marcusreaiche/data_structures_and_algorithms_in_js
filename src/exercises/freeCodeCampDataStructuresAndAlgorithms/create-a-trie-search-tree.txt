var displayTree = tree => console.log(JSON.stringify(tree, null, 2));
var Node = function() {
  this.keys = new Map();
  this.end = false;
  this.setEnd = function() {
    this.end = true;
  };
  this.isEnd = function() {
    return this.end;
  };
};
var Trie = function() {
  // change code below this line
  this.root = new Node();
  this.add = function(word, node=this.root) {
    if(this.root === null) {
      this.root = new Node();
    }
    if(!word) {
      // base case
      node.setEnd();
      return;
    }
    else {
      const c = word.charAt(0);
      if(!node.keys.get(c)) {
        // add new key
        node.keys.set(c, new Node());
      }
      // recursion
      this.add(word.slice(1), node.keys.get(c));
    }
  }
  this.isWord = function(word, node=this.root) {
    if(!word) {
      // base case
      return node.isEnd();
    }
    else {
      const c = word.charAt(0);
      if(!node.keys.get(c)) {
        return false;
      }
      else {
        // recursion
        return this.isWord(word.slice(1), node.keys.get(c));
      }
    }
  }
  this.print = function() {
    const words = [];
    function addString(node, s) {
      if(node.isEnd()) {
        words.push(s);
      }
      for(let c of node.keys.entries()) {
        addString(c[1], s + c[0]);
      }
    }
    addString(this.root, "");
    return words;
  }
  // change code above this line
};
const trie = new Trie();
console.log(trie.root);
trie.add("cat");
trie.add("car");
trie.add("cart");
trie.add("dog");
trie.add("doggy");
console.log(trie.print());
console.log(trie.isWord("cat"));
console.log(trie.isWord("cart"));