var called = 0;
var hash = string => {
  called++;
  var hashed = 0;
  for (var i = 0; i < string.length; i++) {
    hashed += string.charCodeAt(i);
  }
  return hashed;
};
var HashTable = function() {
  this.collection = {};
  // change code below this line
  this.print = () => console.log(this.collection);
  this.add = function(key, value) {
    const hashedKey = hash(key);
    if(this.collection[hashedKey] === undefined) {
      // First insertion
      this.collection[hashedKey] = [[key, value]];
    }
    else {
      // Check if key was already inserted
      let inserted = false;
      const L = this.collection[hashedKey].length;
      for(let i = 0; i < L; i++) {
        const [k, v] = this.collection[hashedKey][i];
        if(key === k) {
          this.collection[hashedKey][i][1] = value;
          inserted = true;
          break;
        }
      }
      if(!inserted) this.collection[hashedKey].push([key, value]);
    }
  }
  this.lookup = function(key) {
    const hashedKey = hash(key);
    if(this.collection[hashedKey] === undefined) return null;
    const L = this.collection[hashedKey].length;
    for(let i = 0; i < L; i++) {
      const [k, value] = this.collection[hashedKey][i];
      if(key === k) {
        return value;
      }
    }
    return null;
  }
  this.remove = function(key) {
    const hashedKey = hash(key);
    if(this.collection[hashedKey] === undefined) return null;
    const L = this.collection[hashedKey].length;
    for(let i = 0; i < L; i++) {
      const [k, ] = this.collection[hashedKey][i];
      if(key === k) {
        this.collection[hashedKey].splice(i, 1);
        return;
      }
    }
    return null;
  }
  // change code above this line
};
