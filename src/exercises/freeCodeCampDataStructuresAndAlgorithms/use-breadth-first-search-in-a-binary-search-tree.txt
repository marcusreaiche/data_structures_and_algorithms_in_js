var displayTree = tree => console.log(JSON.stringify(tree, null, 2));
function Node(value) {
  this.value = value;
  this.left = null;
  this.right = null;
}
function BinarySearchTree() {
  this.root = null;
  // change code below this line
  this.levelOrder = () => {
    if(this.root === null) return null;
    const results = [];
    const queue = [this.root];
    while(queue.length > 0) {
      const node = queue.shift();
      results.push(node.value);
      // put children in the queue
      if(node.left) {
        queue.push(node.left);
      }
      if(node.right) {
        queue.push(node.right);
      }
    }
    return results;
  }
  this.reverseLevelOrder = () => {
    if(this.root === null) return null;
    const results = [];
    const queue = [this.root];
    while(queue.length > 0) {
      const node = queue.shift();
      results.push(node.value);
      // put children in the queue
      if(node.right) {
        queue.push(node.right);
      }
      if(node.left) {
        queue.push(node.left);
      }
    }
    return results;
  }
  // change code above this line
  this.add = function(element, node=this.root) {
    const newNode = new Node(element);
    if(!node) {
      // root is empty
      this.root = newNode;
    }
    else if(node.value > element) {
      if (node.left === null) {
        node.left = newNode;
      }
      else {
        this.add(element, node.left);
      }
    }
    else if(node.value < element) {
      if (node.right === null) {
        node.right = newNode;
      }
      else {
        this.add(element, node.right);
      }
    }
    else{
      return null;
    }
  }
}
const bst = new BinarySearchTree();
bst.add(8);
bst.add(10);
bst.add(2);
bst.add(1);
bst.add(13);
bst.add(17);
bst.add(4);
console.log(bst.levelOrder());
console.log(bst.reverseLevelOrder());
